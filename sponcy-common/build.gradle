plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

sourceSets {
    main {
        java {
            exclude 'sponcy/Sponcy.java'
        }
    }
    replacements {
        java {
            srcDirs = ['src/main/java']
            include 'sponcy/Sponcy.java'
        }
        resources.srcDirs = []
    }
}

minecraft {
    accessTransformer file('src/main/resources/META-INF/accesstransformer.cfg')
}

dependencies {
    testImplementation "junit:junit:${junit_version}"

    //SQLiteJDBC
    implementation "org.xerial:sqlite-jdbc:${sqlite_jdbc_version}"
}

task processReplacements(type: Sync) {
    inputs.property 'mod_version', project.mod_version
    inputs.property 'mc_version', project.mc_version
    inputs.property 'forge_version', project.forge_version
    inputs.files sourceSets.replacements.java

    from(sourceSets.replacements.java) {
        filter { line -> line
                .replace("MOD_VERSION = \"99999.999.999\"", "MOD_VERSION = \"${mod_version}\"")
                .replace("MC_VERSION = \"\"", "MC_VERSION = \"[${mc_version}]\"")
                .replace("DEPENDENCIES = \"\"", "DEPENDENCIES = \"required-after:forge@[${forge_version},)\"")
        }
    }

    into "${project.buildDir}/src"
}

compileJava {
    source += processReplacements.outputs
}

processResources {
    inputs.property 'version', project.version
    inputs.property 'mc_version', project.mc_version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand([
                'version'   : project.version,
                'mc_version': project.mc_version,
        ])
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

shadowJar {
    classifier = ''
    exclude 'dummyThing'

    dependencies {
        include(dependency("org.xerial:sqlite-jdbc:${sqlite_jdbc_version}"))
    }

    artifacts {
        shadow(tasks.shadowJar.archiveFile) {
            builtBy shadowJar
        }
    }
}

build.dependsOn(shadowJar)
