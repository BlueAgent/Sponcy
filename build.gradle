plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'net.minecraftforge.gradle' version '3.0.189'
}

sourceSets {
    main {
        java {
            exclude 'sponcy/Sponcy.java'
        }
    }
    replacements {
        java {
            srcDirs = ['src/main/java']
            include 'sponcy/Sponcy.java'
        }
        resources.srcDirs = []
    }
}

version = project.mod_version
group = project.mod_id
archivesBaseName = "${project.mod_id}-${mc_version}"
sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
    mappings channel: project.mappings_channel, version: project.mappings_version

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

repositories {
    maven {
        name 'Forge'
        url 'https://files.minecraftforge.net/maven'
        content {
            includeGroup 'net.minecraftforge'
        }
    }
    maven {
        name 'progwml6'
        url 'https://dvs1.progwml6.com/files/maven'
        content {
            includeGroup 'mezz.jei'
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    testImplementation "junit:junit:${junit_version}"

    compileOnly fg.deobf("mezz.jei:jei_${mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei_${mc_version}:${jei_version}")

    //SQLiteJDBC
    compile "org.xerial:sqlite-jdbc:${sqlite_jdbc_version}"
}

jar {
    manifest {
        attributes([
            'Specification-Title': project.name,
            'Specification-Vendor': project.vendor,
            'Specification-Version': '1',
            'Implementation-Title': project.group,
            'Implementation-Version': project.version,
            'Implementation-Vendor': project.vendor,
        ])
    }
}

task processReplacements(type: Sync) {
    inputs.property 'mod_version', project.mod_version
    inputs.property 'mc_version', project.mc_version
    inputs.property 'forge_version', project.forge_version
    inputs.files sourceSets.replacements.java

    from(sourceSets.replacements.java) {
        filter { line -> line
                .replace("MOD_VERSION = \"99999.999.999\"", "MOD_VERSION = \"${mod_version}\"")
                .replace("MC_VERSION = \"\"", "MC_VERSION = \"[${mc_version}]\"")
                .replace("DEPENDENCIES = \"\"", "DEPENDENCIES = \"required-after:forge@[${forge_version},)\"")
        }
    }

    into "${project.buildDir}/src"
}

compileJava {
    source += processReplacements.outputs
}

processResources {
    inputs.property 'version', project.version
    inputs.property 'mc_version', project.mc_version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand([
            'version': project.version,
            'mc_version': project.mc_version,
        ])
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

shadowJar {
    classifier = ''
    exclude 'dummyThing'

    dependencies {
        include(dependency("org.xerial:sqlite-jdbc:${sqlite_jdbc_version}"))
    }
}

reobf {
    shadowJar {}
}

build.dependsOn(shadowJar)
